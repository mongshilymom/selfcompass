import React, { useEffect, useMemo, useRef, useState } from 'react'
import { createClient, Session } from '@supabase/supabase-js'
import { toPng } from 'html-to-image'
import {
  Chart as ChartJS,
  LineElement, BarElement, PointElement,
  LinearScale, CategoryScale,
  Tooltip, Legend,
} from 'chart.js'
import { Line, Bar } from 'react-chartjs-2'

ChartJS.register(LineElement, BarElement, PointElement, LinearScale, CategoryScale, Tooltip, Legend)

// ---------- Supabase ----------
const supabaseUrl = import.meta.env.VITE_SUPABASE_URL as string
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY as string
const supabase = createClient(supabaseUrl, supabaseAnonKey)

// ---------- Types ----------
type Dimension = 'E' | 'I' | 'L' | 'F' | 'A' | 'C'

type Question = {
  id: number
  text: string
  dims: Partial<Record<Dimension, number>> // weights (positive adds to that dim)
}

type Scores = Record<Dimension, number>

type TypeKey = 'ELA' | 'ELF' | 'ECA' | 'ECF' | 'ILA' | 'ILF' | 'ICA' | 'ICF'

// ---------- Questions (12) ----------
const QUESTIONS: Question[] = [
  { id: 1, text: 'Î™®Î•¥Îäî ÏÇ¨Îûå ÎßéÏùÄ ÏûêÎ¶¨Ïóê Í∞ÄÎ©¥ ÏóêÎÑàÏßÄÍ∞Ä Ï∂©Ï†ÑÎêúÎã§.', dims: { E: 1 } },
  { id: 2, text: 'Í≥ÑÌöç ÏóÜÎäî Ï£ºÎßêÏù¥ ÏÑ§Î†åÎã§. Ï¶âÌù•Ïù¥ Ïû¨Î∞åÎã§.', dims: { E: 1, A: 1 } },
  { id: 3, text: 'ÎÖºÎ¶¨Ï†Å ÏùºÍ¥ÄÏÑ±Ïù¥ Í∞êÏ†ïÎ≥¥Îã§ Ïö∞ÏÑ†Ïù¥Îã§.', dims: { L: 1 } },
  { id: 4, text: 'ÎåÄÌôîÏóêÏÑú Î∂ÑÏúÑÍ∏∞/ÌëúÏ†ïÏùÑ Î®ºÏ†Ä ÏùΩÎäîÎã§.', dims: { F: 1, C: 1 } },
  { id: 5, text: 'ÌòºÏûê Î™∞ÏûÖÌïòÎ©¥ ÏÑ±Í≥ºÍ∞Ä Í∞ÄÏû• Ï¢ãÎã§.', dims: { I: 1, A: 1 } },
  { id: 6, text: 'ÏôÑÎ≤ΩÌïòÏßÑ ÏïäÏïÑÎèÑ Îπ®Î¶¨ Ï∂úÏãúÍ∞Ä ÎÇ´Îã§.', dims: { E: 1, A: 1, L: 1 } },
  { id: 7, text: 'Î∞∞Î†§ÌïòÎäêÎùº ÎÇ¥ ÏùòÍ≤¨ÏùÑ Ï†ëÎäî Ìé∏Ïù¥Îã§.', dims: { F: 1, C: 1 } },
  { id: 8, text: 'Í∑úÏπô¬∑Ï≤¥Í≥ÑÍ∞Ä ÏûàÏúºÎ©¥ Îçî Ìé∏ÌïòÎã§.', dims: { C: 1, I: 1 } },
  { id: 9, text: 'Í∞àÎì±Ïù¥ ÏÉùÍ∏∞Î©¥ Îç∞Ïù¥ÌÑ∞ÏôÄ ÏÇ¨Î°ÄÎ°ú Ï†ïÎ¶¨ÌïúÎã§.', dims: { L: 1, I: 1 } },
  { id: 10, text: 'ÏÉà ÏïÑÏù¥ÎîîÏñ¥Í∞Ä Îñ†Ïò§Î•¥Î©¥ ÏùºÎã® ÏãúÎèÑÎ∂ÄÌÑ∞ ÌïúÎã§.', dims: { E: 1, A: 1 } },
  { id: 11, text: 'Ï§ëÏöîÌïú ÏÑ†ÌÉùÏóêÏÑú ‚ÄúÎÇ¥ ÎßàÏùåÏù¥ Ìé∏ÌïúÍ∞Ä‚ÄùÎ•º Î≥∏Îã§.', dims: { F: 1 } },
  { id: 12, text: 'Ï£ºÎ≥ÄÏùÑ Ï±ôÍ∏∞Í≥† Ïó∞Í≤∞ÌïòÎäî Ïó≠Ìï†ÏùÑ ÏûêÏ£º Îß°ÎäîÎã§.', dims: { C: 1, E: 1 } },
]

const DIM_LIST: Dimension[] = ['E', 'I', 'L', 'F', 'A', 'C']
const MAX_PER_QUESTION = 4 // answer 1..5 ‚Üí (ans-1) ranges 0..4, we sum weights * (ans-1)
const DIM_MAX: Scores = DIM_LIST.reduce((acc, d) => {
  const hits = QUESTIONS.reduce((n, q) => n + (q.dims[d] ? 1 : 0), 0)
  acc[d] = hits * MAX_PER_QUESTION
  return acc
}, { E: 0, I: 0, L: 0, F: 0, A: 0, C: 0 } as Scores)

const TYPE_META: Record<TypeKey, {
  name: string; emoji: string; oneLine: string; strengths: string[]; caution: string;
  bestMatch: TypeKey; hashtags: string[];
}> = {
  ELA: {
    name: 'Ïä§ÌååÌÅ¨ Î©îÏù¥Ïª§', emoji: '‚ö°Ô∏è', oneLine: 'ÏÇ¨Îûå ÏÜçÏóêÏÑú Î≤àÎú©ÏûÑÏùÑ ÌÑ∞Îú®Î¶¨Îäî ÏãúÎèô Ïû•Ïπò',
    strengths: ['Ïã§Ìñâ ÏÜçÎèÑ', 'ÎÑ§Ìä∏ÏõåÌÇπ', 'Ï¥àÍ∏∞ Î™®Î©òÌÖÄ'], caution: 'Í≥ºÏó¥ Ï£ºÏùò ‚Äî Î£®Ìã¥ÏúºÎ°ú Î¶¨Îì¨ ÎßåÎì§Í∏∞',
    bestMatch: 'ICF', hashtags: ['#ÎÇòÏπ®Î∞òÏú†Ìòï', '#Ïä§ÌååÌÅ¨Î©îÏù¥Ïª§']
  },
  ELF: {
    name: 'ÌååÌã∞ ÌÅêÎ†àÏù¥ÌÑ∞', emoji: 'üéâ', oneLine: 'Î∂ÑÏúÑÍ∏∞Î•º Ï°∞Ïú®Ìï¥ ÌåÄ ÏóêÎÑàÏßÄÎ•º ÎÅåÏñ¥Ïò¨Î¶∞Îã§',
    strengths: ['Î∂ÑÏúÑÍ∏∞ Í∞êÍ∞Å', 'Ïó∞Í≤∞ Îä•Î†•', 'ÏãúÏûëÏùò Ï¶êÍ±∞ÏõÄ'], caution: 'ÎîúÎ¶¨Î≤ÑÎ¶¨ ÎßàÍ∞ê Ï£ºÏùò',
    bestMatch: 'ILA', hashtags: ['#ÌååÌã∞ÌÅêÎ†àÏù¥ÌÑ∞']
  },
  ECA: {
    name: 'ÌîÑÎü∞Ìã∞Ïñ¥ ÌååÏùºÎüø', emoji: 'üõ©Ô∏è', oneLine: 'Í∑úÏπô ÏúÑÏóêÏÑú ÏÜçÎèÑÎ•º ÎΩëÏïÑÎÇ¥Îäî Í∞úÏ≤ô Ï°∞Ï¢ÖÏÇ¨',
    strengths: ['Ï°∞ÏßÅÌôîÎêú Ïã§Ìñâ', 'Î¶¨Ïä§ÌÅ¨ Í¥ÄÎ¶¨', 'Î¶¨ÎìúÏã≠'], caution: 'ÏúµÌÜµÏÑ± ÏûÉÏßÄ ÏïäÍ∏∞',
    bestMatch: 'ILF', hashtags: ['#ÌîÑÎü∞Ìã∞Ïñ¥ÌååÏùºÎüø']
  },
  ECF: {
    name: 'ÌåÄ ÌïòÎ™®ÎÇòÏù¥Ï†Ä', emoji: 'üß©', oneLine: 'ÏÇ¨ÎûåÏùÑ ÏóÆÏñ¥ Ìï©ÏùÑ Ïò¨Î¶¨Îäî Î∂ÑÏúÑÍ∏∞ Ï°∞Ï†ïÏûê',
    strengths: ['Ï°∞Ï†ïÎ†•', 'ÏÑúÌè¨Ìä∏', 'Í¥ÄÍ≥Ñ Ïú†ÏßÄ'], caution: 'ÏùòÍ≤¨ Ìù¨ÏÑù Í≤ΩÍ≥Ñ',
    bestMatch: 'ILA', hashtags: ['#ÌåÄÌïòÎ™®ÎÇòÏù¥Ï†Ä']
  },
  ILA: {
    name: 'ÏÜîÎ°ú ÏïÑÌÇ§ÌÖçÌä∏', emoji: 'üß†', oneLine: 'ÍπäÍ≤å ÏÑ§Í≥ÑÌïòÍ≥† Ï°∞Ïö©Ìûà ÏôÑÏÑ±ÌïòÎäî Íµ¨Ï°∞Í∞Ä Ï≤úÏßÅ',
    strengths: ['ÏßëÏ§ë', 'ÎÖºÎ¶¨', 'ÏÑ§Í≥Ñ'], caution: 'Í≥µÏú†¬∑ÌòëÏóÖ ÌÉÄÏù¥Î∞ç Ïû°Í∏∞',
    bestMatch: 'ECF', hashtags: ['#ÏÜîÎ°úÏïÑÌÇ§ÌÖçÌä∏']
  },
  ILF: {
    name: 'ÏÇ¨ÏÉâ ÌîÑÎ°úÎìÄÏÑú', emoji: 'üåô', oneLine: 'ÍπäÏùÄ Í≥µÍ∞êÍ≥º ÎØ∏Í∞êÏùÑ Í≤∞Í≥ºÎ°ú ÏòÆÍ∏∞Îäî Ï∞ΩÏûëÏûê',
    strengths: ['Í≥µÍ∞ê', 'Í∞êÏàòÏÑ±', 'ÌëúÌòÑ'], caution: 'ÏôÑÏÑ±¬∑Ï∂úÏãú Î¶¨Îì¨',
    bestMatch: 'ECA', hashtags: ['#ÏÇ¨ÏÉâÌîÑÎ°úÎìÄÏÑú']
  },
  ICA: {
    name: 'Îî•Îã§Ïù¥Î≤Ñ Ìï¥Ïª§', emoji: 'üß™', oneLine: 'ÌòºÏûê ÌååÍ≥†Îì§Ïñ¥ ÏãúÏä§ÌÖúÏùÑ Ïû¨Î∞úÎ™ÖÌïòÎäî Ïã§ÌóòÎü¨',
    strengths: ['ÏßëÏöîÌï®', 'Î¨∏Ï†úÌï¥Í≤∞', 'ÏûêÎèôÌôî'], caution: 'ÏÇ¨ÏùºÎ°ú¬∑ÏôÑÎ≤ΩÏ£ºÏùò Í≤ΩÍ≥Ñ',
    bestMatch: 'ELF', hashtags: ['#Îî•Îã§Ïù¥Î≤ÑÌï¥Ïª§']
  },
  ICF: {
    name: 'Ï†ïÏõêÏÇ¨ ÌîåÎûòÎÑà', emoji: 'üåø', oneLine: 'Í¥ÄÍ≥ÑÏôÄ ÏãúÏä§ÌÖúÏùÑ Îã§Ï†∏ 1‚ÜíNÏùÑ ÌÇ§Ïö∞Îäî ÏÑ±Ïû• Í¥ÄÎ¶¨Ïûê',
    strengths: ['Î£®Ìã¥', 'Î∞∞Î†§', 'ÏßÄÏÜç ÏÑ±Ïû•'], caution: 'Ï¥àÍ∏∞ ÏÜçÎèÑ¬∑Í≤∞Îã® Í∞ïÌôî',
    bestMatch: 'ELA', hashtags: ['#Ï†ïÏõêÏÇ¨ÌîåÎûòÎÑà']
  },
}

const clamp = (v: number, min = 0, max = 10) => Math.max(min, Math.min(max, v))

function normalizeScores(raw: Scores): Scores {
  const out: Scores = { E: 0, I: 0, L: 0, F: 0, A: 0, C: 0 }
  for (const d of DIM_LIST) {
    const max = DIM_MAX[d] || 1
    out[d] = clamp((raw[d] / max) * 10)
  }
  return out
}

function typeFromScores(s: Scores): TypeKey {
  const e = s.E >= s.I ? 'E' : 'I'
  const l = s.L >= s.F ? 'L' : 'F'
  const a = s.A >= s.C ? 'A' : 'C'
  return (e + l + a) as TypeKey
}

function todayISODate() {
  const d = new Date()
  return d.toISOString().slice(0, 10)
}

// ---------- Supabase events ----------
async function ensureAnonSession(): Promise<Session | null> {
  const { data: sessionData } = await supabase.auth.getSession()
  if (sessionData.session) return sessionData.session
  const { data, error } = await supabase.auth.signInAnonymously()
  if (error) {
    console.error('Anon sign-in error', error.message)
    return null
  }
  return data.session
}

async function logEvent(type: string, payload?: any, minutes?: number) {
  try {
    const { data: user } = await supabase.auth.getUser()
    const user_id = user.user?.id || null
    const occurred_at = new Date().toISOString()
    await supabase.from('events').insert([{ type, payload, minutes, user_id, occurred_at }])
  } catch (e) {
    console.warn('logEvent failed', e)
  }
}

// ---------- Layout ----------
const PageShell: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <div className="min-h-screen w-full bg-gradient-to-b from-slate-50 to-white text-slate-900">
    <div className="max-w-xl mx-auto px-5 py-8">
      <header className="flex items-center justify-between mb-6">
        <div className="text-2xl font-bold">üß≠ ÎßàÏùåÎÇòÏπ®Î∞ò</div>
        <div className="text-xs opacity-60">MVP ‚Ä¢ {todayISODate()}</div>
      </header>
      <div className="rounded-2xl shadow p-5 bg-white">{children}</div>
      <footer className="py-8 text-center text-xs text-slate-400">¬© MindQuiz ‚Ä¢ MVP</footer>
    </div>
  </div>
)

const Progress: React.FC<{ step: number; total: number }> = ({ step, total }) => {
  const p = Math.round((step / total) * 100)
  return (
    <div className="w-full bg-slate-100 h-2 rounded-full overflow-hidden mb-4">
      <div className="h-2 bg-slate-900" style={{ width: `${p}%` }} />
    </div>
  )
}

// ---------- App ----------
export default function App() {
  const [ready, setReady] = useState(false)
  const [mode, setMode] = useState<'quiz' | 'result' | 'admin'>('quiz')
  const [answers, setAnswers] = useState<Record<number, number>>({}) // 1..5
  const [startAt, setStartAt] = useState<number>(Date.now())

  useEffect(() => {
    const sp = new URLSearchParams(window.location.search)
    if (sp.get('admin') === '1') setMode('admin')
    ;(async () => {
      await ensureAnonSession()
      setReady(true)
      if (sp.get('admin') !== '1') {
        setStartAt(Date.now())
        logEvent('quiz_start')
      }
    })()
  }, [])

  if (!ready) return <PageShell><div>Î°úÎî© Ï§ë‚Ä¶</div></PageShell>

  return (
    <PageShell>
      {mode === 'quiz' && (
        <QuizView
          answers={answers}
          setAnswers={setAnswers}
          onComplete={() => setMode('result')}
          startAt={startAt}
        />
      )}
      {mode === 'result' && (
        <ResultView answers={answers} onRestart={() => {
          setAnswers({}); setStartAt(Date.now()); setMode('quiz'); logEvent('quiz_start')
        }} />
      )}
      {mode === 'admin' && (
        <AdminView />
      )}
    </PageShell>
  )
}

// ---------- Quiz View ----------
const QuizView: React.FC<{
  answers: Record<number, number>;
  setAnswers: (a: Record<number, number>) => void;
  onComplete: (ok: boolean) => void;
  startAt: number;
}> = ({ answers, setAnswers, onComplete, startAt }) => {
  const [index, setIndex] = useState(0)
  const total = QUESTIONS.length
  const current = QUESTIONS[index]

  const setAnswer = (qid: number, val: number) => {
    const next = { ...answers, [qid]: val }
    setAnswers(next)
  }

  const next = async () => {
    if (index < total - 1) {
      setIndex(index + 1)
    } else {
      const { typeKey, scores } = computeResult(answers)
      const minutes = Math.max(0.1, (Date.now() - startAt) / 60000)
      await logEvent('quiz_complete', { typeKey, scores, answers }, minutes)
      onComplete(true)
    }
  }

  return (
    <div>
      <div className="text-sm mb-1 text-slate-500">30Ï¥à ÎßåÏóê ÎÇ¥ ÎßàÏùåÏùò Î∞©Ìñ• Ïû°Í∏∞</div>
      <h1 className="text-xl font-bold mb-3">Q{index + 1}. {current.text}</h1>
      <Progress step={index} total={total} />
      <div className="grid grid-cols-5 gap-2 my-4">
        {[1,2,3,4,5].map(v => (
          <button key={v}
            onClick={() => setAnswer(current.id, v)}
            className={
              'py-3 rounded-xl border text-sm ' +
              (answers[current.id] === v
                ? 'bg-slate-900 text-white border-slate-900'
                : 'bg-white hover:bg-slate-50 border-slate-200')
            }>{v === 1 ? 'Ï†ÑÌòÄ ÏïÑÎãò' : v === 5 ? 'Îß§Ïö∞ Í∑∏Îüº' : v}</button>
        ))}
      </div>
      <div className="flex items-center justify-between mt-6">
        <div className="text-xs text-slate-500">Î¨∏Ìï≠ {index + 1}/{total}</div>
        <button
          disabled={!answers[current.id]}
          onClick={next}
          className={'px-4 py-2 rounded-xl text-white ' + (!answers[current.id] ? 'bg-slate-300' : 'bg-slate-900 hover:opacity-90')}
        >{index === total - 1 ? 'Í≤∞Í≥º Î≥¥Í∏∞' : 'Îã§Ïùå'}</button>
      </div>
    </div>
  )
}

// ---------- Result View ----------
const ResultView: React.FC<{ answers: Record<number, number>; onRestart: () => void }>
= ({ answers, onRestart }) => {
  const { typeKey, scores } = useMemo(() => computeResult(answers), [answers])
  const meta = TYPE_META[typeKey]
  const cardRef = useRef<HTMLDivElement>(null)
  const [sharing, setSharing] = useState(false)
  const [toast, setToast] = useState<string | null>(null)

  const shareText = `I'm ${typeKey} ${meta.name}. ÎÑàÎäî Î≠ê ÎÇòÏôîÏñ¥? #ÎßàÏùåÎÇòÏπ®Î∞ò`
  const url = typeof window !== 'undefined' ? window.location.origin : ''

  const downloadCard = async () => {
    if (!cardRef.current) return
    const dataUrl = await toPng(cardRef.current)
    const a = document.createElement('a')
    a.href = dataUrl; a.download = `SelfCompass_${typeKey}.png`; a.click()
  }

  const share = async () => {
    setSharing(true)
    try {
      await logEvent('share_click', { platform: (navigator as any).share ? 'web_share' : 'copy' })
      if ((navigator as any).share && cardRef.current) {
        const dataUrl = await toPng(cardRef.current)
        const res = await fetch(dataUrl)
        const blob = await res.blob()
        const file = new File([blob], `SelfCompass_${typeKey}.png`, { type: 'image/png' })
        await (navigator as any).share({ title: 'ÎßàÏùåÎÇòÏπ®Î∞ò', text: shareText, url, files: [file] })
      } else {
        await navigator.clipboard.writeText(f"{shareText} {url}")
        setToast('Ï∫°ÏÖò+ÎßÅÌÅ¨Í∞Ä Î≥µÏÇ¨ÎêòÏóàÏäµÎãàÎã§!')
      }
      await logEvent('share_success', { typeKey })
    } catch (e) {
      console.warn(e)
      setToast('Í≥µÏú†Í∞Ä Ï∑®ÏÜåÎêòÏóàÏñ¥Ïöî.')
    } finally {
      setSharing(false)
      setTimeout(() => setToast(null), 2000)
    }
  }

  return (
    <div>
      <div ref={cardRef} className="rounded-2xl border border-slate-200 p-5 bg-white">
        <div className="text-xs text-slate-500 mb-2">ÎÇòÎäî‚Ä¶</div>
        <div className="text-3xl font-extrabold mb-1">{meta.emoji} {meta.name} <span className="text-slate-400 text-xl">({typeKey})</span></div>
        <div className="text-slate-600 mb-4">{meta.oneLine}</div>
        <div className="grid grid-cols-2 gap-3 text-sm">
          <div className="rounded-xl bg-slate-50 p-3">
            <div className="font-semibold mb-1">Í∞ïÏ†ê</div>
            <ul className="list-disc pl-5">
              {meta.strengths.map(s => <li key={s}>{s}</li>)}
            </ul>
          </div>
          <div className="rounded-xl bg-slate-50 p-3">
            <div className="font-semibold mb-1">Ï£ºÏùò</div>
            <div>{meta.caution}</div>
          </div>
        </div>
        <div className="mt-4 text-xs text-slate-500">Ï∞∞Îñ° ÌååÌä∏ÎÑà: <b>{TYPE_META[meta.bestMatch].name}</b> ({meta.bestMatch})</div>
        <div className="mt-2 text-xs text-slate-400">{meta.hashtags.join(' ')}</div>
      </div>

      <div className="mt-5 flex gap-2">
        <button onClick={share} disabled={sharing}
                className="px-4 py-2 rounded-xl bg-slate-900 text-white">Í≤∞Í≥º Í≥µÏú†</button>
        <button onClick={downloadCard} className="px-4 py-2 rounded-xl border">Ïπ¥Îìú PNG Ï†ÄÏû•</button>
        <button onClick={onRestart} className="px-4 py-2 rounded-xl border">Îã§Ïãú ÌïòÍ∏∞</button>
      </div>

      {toast && <div className="mt-3 text-sm text-emerald-600">{toast}</div>}

      <div className="mt-8">
        <h3 className="font-semibold mb-2">ÎÇ¥ Ï†êÏàò</h3>
        <Line data={{
          labels: ['E','I','L','F','A','C'],
          datasets: [{ label: 'Ï†êÏàò(0-10)', data: [scores.E, scores.I, scores.L, scores.F, scores.A, scores.C], borderWidth: 2 }]
        }} />
      </div>

      <div className="mt-8 rounded-xl bg-slate-50 p-4 text-xs text-slate-500">
        Î≥∏ Í≤∞Í≥ºÎäî ÏûêÍ∏∞Ïù¥Ìï¥Î•º ÎèïÍ∏∞ ÏúÑÌïú ÏóîÌÑ∞ÌÖåÏù∏Î®ºÌä∏ÏûÖÎãàÎã§.
      </div>
    </div>
  )
}

// ---------- Admin View (7-day stats) ----------
const AdminView: React.FC = () => {
  const [rows, setRows] = useState<{ day: string; quiz_complete: number; share_click: number; purchase_success: number }[]>([])
  const [loading, setLoading] = useState(true)

  useEffect(() => {
    (async () => {
      try {
        const { data, error } = await supabase.rpc('stats_last_7_days')
        if (error) throw error
        setRows(data as any)
      } catch (e) {
        console.warn('RPC failed, fallback to client aggregation', e)
        const since = new Date(Date.now() - 7 * 24 * 3600 * 1000).toISOString()
        const { data } = await supabase.from('events').select('occurred_at,type').gte('occurred_at', since)
        const map = new Map<string, { qc: number; sc: number; ps: number }>()
        const days: string[] = []
        for (let i = 6; i >= 0; i--) {
          const d = new Date(Date.now() - i * 24 * 3600 * 1000).toISOString().slice(0, 10)
          days.push(d); map.set(d, { qc: 0, sc: 0, ps: 0 })
        }
        ;(data || []).forEach((e: any) => {
          const day = e.occurred_at.slice(0, 10)
          if (!map.has(day)) return
          const r = map.get(day)!
          const t = e.type as string
          if (t === 'quiz_complete') r.qc++
          if (t === 'share_click') r.sc++
          if (t === 'purchase_success') r.ps++
        })
        const out = days.map(d => ({ day: d, quiz_complete: map.get(d)!.qc, share_click: map.get(d)!.sc, purchase_success: map.get(d)!.ps }))
        setRows(out)
      } finally {
        setLoading(false)
      }
    })()
  }, [])

  if (loading) return <div>ÏßëÍ≥Ñ Î∂àÎü¨Ïò§Îäî Ï§ë‚Ä¶</div>

  const labels = rows.map(r => r.day.slice(5))
  const quizData = rows.map(r => r.quiz_complete)
  const shareData = rows.map(r => r.share_click)
  const purchData = rows.map(r => r.purchase_success)

  return (
    <div>
      <div className="text-lg font-bold mb-4">üìä Admin ‚Äî ÏµúÍ∑º 7Ïùº</div>
      <div className="grid gap-6">
        <div>
          <div className="font-semibold mb-2">ÌÄ¥Ï¶à ÏôÑÎ£å</div>
          <Line data={{ labels, datasets: [{ label: 'quiz_complete', data: quizData }] }} />
        </div>
        <div>
          <div className="font-semibold mb-2">Í≥µÏú† ÌÅ¥Î¶≠</div>
          <Line data={{ labels, datasets: [{ label: 'share_click', data: shareData }] }} />
        </div>
        <div>
          <div className="font-semibold mb-2">Íµ¨Îß§ ÏÑ±Í≥µ(Îç∞Î™®)</div>
          <Bar data={{ labels, datasets: [{ label: 'purchase_success', data: purchData }] }} />
        </div>
      </div>
      <div className="mt-6 text-xs text-slate-500">RPCÍ∞Ä ÏÑ§Ï†ïÎêòÎ©¥ ÏùµÎ™Ö ÌÇ§Î°úÎèÑ ÏïàÏ†ÑÌïòÍ≤å ÏßëÍ≥ÑÎê©ÎãàÎã§.</div>
    </div>
  )
}

// ---------- Compute result ----------
function computeResult(answers: Record<number, number>): { typeKey: TypeKey; scores: Scores } {
  const raw: Scores = { E: 0, I: 0, L: 0, F: 0, A: 0, C: 0 }
  for (const q of QUESTIONS) {
    const ans = answers[q.id]
    if (!ans) continue
    const adj = Math.max(0, Math.min(4, ans - 1)) // 0..4
    for (const d in q.dims) {
      const dim = d as Dimension
      raw[dim] += adj * (q.dims[dim] || 1)
    }
  }
  const scores = normalizeScores(raw)
  const typeKey = typeFromScores(scores)
  return { typeKey, scores }
}
